@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<IEnumerable<Redlime.Modules.QuestionModule.Models.Question>>

@using System.Text.RegularExpressions
@using DotNetNuke.Web.Mvc.Helpers


<div id="Questions-@Dnn.ModuleContext.ModuleId">

    <div class="col-md-12">
        <div class="col-md-4" style="border: 1px solid gray">
            <div id="add-form" style="margin:5px;">
                <fieldset>
                    <input type="hidden" id="Id" v-model="model.Id" name="Id" class="" />
                    <input type="hidden" id="ModuleId" v-model="model.Id" name="ModuleId" class="" />
                    <div class="dnnFormItem">
                        <div><label for="itemName">@Dnn.LocalizeString("lblName")</label></div>
                        <input id="QuestionTitle" v-model="model.QuestionTitle" name="QuestionTitle" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="itemUser">@Dnn.LocalizeString("lblQuestionType")</label>
                        <select class="form-control" v-model="model.QuestionType">
                            <option value="">-- select --</option>
                            <option v-for="item in questionTypes" :key="item.value"
                                    :value="item.value">
                                {{item.text}}
                            </option>
                        </select>
                    </div>
                </fieldset>

                <div class="form-group row">
                    <div class="col-md-offset-8 col-md-4" align="right">
                        <button type="button" name="btnSubmit" @@click="addQuestion" title="Save" class="btn btn-primary btn-block">
                            <span v-if="model.Id == 0">Save</span>
                            <span v-if="model.Id != 0">Update</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            @if (Model == null || Model.Count() == 0)
            {
                <p>@Dnn.LocalizeString("NoItems")</p>
            }
            else
            {


                <table class="table table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>Question</th>
                            <th>Type</th>
                            <th>Action</th>
                        </tr>
                    </thead>

                    <tbody>
                        <tr v-for="item in rows" :key="item.value">
                            <td>{{item.QuestionTitle}}</td>
                            <td>{{item.QuestionType}}</td>
                            <td>
                                <div>
                                    <button type="button" class="btn btn-warning btn-sm" style="margin:0 1px" @@click="getById(item.Id)">@Dnn.LocalizeString("EditQuestion")</button>
                                    <button type="button" class="btn btn-danger btn-sm" style="margin:0 1px" @@click="deleteQuestion(item.Id)">@Dnn.LocalizeString("DeleteQuestion")</button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>

            }

        </div>
    </div>
</div>

@section scripts{
    <script>

        const { createApp, ref } = Vue
        createApp({
            data() {
                return {
                    //columns: [
                    //    { label: 'Employee ID', field: 'EmployeeID', align: 'center', filterable: false },
                    //    //{ label: 'Department Name', field: 'Dep_Name' },
                    //],
                    page: 1,
                    per_page: 10,
                    filter: '',
                    model: {
                        Id :0,
                        QuestionTitle: '',
                        QuestionType: ''
                    },
                    rows: [],
                    baseUrl: '/DesktopModules/MVC/QuestionModule/Question',
                    headers: {
                        ModuleId: @Dnn.ModuleContext.ModuleId,
                        TabId: @Dnn.ModuleContext.TabId,
                        RequestVerificationToken: document.querySelector("input[name='__RequestVerificationToken']")?.value,
                    },
                    questionTypes: [{ text: "True Or False", value: "TRUE_FALSE" }, { text: "Multiple Choice", value : "MULTIPLE_CHOICE" }]
                }
            },
            created() {
               this.getData();
            },
            methods: {
                getData() {
                    axios.get(this.baseUrl + '/GetList', { headers: { ...this.headers } }).then(res => {
                        this.rows = res.data;
                    })
                },
                getById(id) {
                    axios.get(this.baseUrl + '/Get?id=' + id, { headers: { ...this.headers } }).then(res => {
                        this.model = res.data;
                    })
                },
                addQuestion() {
                    axios.post(this.baseUrl + '/AddQuestion', this.model, { headers: { ...this.headers } })
                        .then(response => {
                            const res = response.data;
                            alert(res.message);
                            if (res.success) {
                                this.getData();
                                this.resetForm();
                            }
                        })
                },
                deleteQuestion(id) {
                    axios.delete(this.baseUrl + '/Delete', { data: {id:id},headers: { ...this.headers } }).then(res => {
                        let r = res.data;
                        alert(r.msg);
                        if (r.success) {
                              this.getData();
                        }
                    })
                },
                resetForm() {
                    this.model = {
                        Id: 0,
                        QuestionTitle: '',
                        QuestionType: '',
                    }
                }
            }
        }).mount('#Questions-@Dnn.ModuleContext.ModuleId');

        @*debugger
        new Vue({
            el: '#Questions-@Dnn.ModuleContext.ModuleId',
            data() {
                return {
                    columns: [
                        { label: 'Employee ID', field: 'EmployeeID', align: 'center', filterable: false },
                        //{ label: 'Department Name', field: 'Dep_Name' },
                    ],
                    page: 1,
                    per_page: 10,
                    filter: '',
                    model: {
                        Id :'',
                        QuestionTitle: '',
                        QuestionType: ''
                    },
                    baseUrl: '/DesktopModules/MVC/QuestionModule/Question',
                    headers: {
                        ModuleId: @Dnn.ModuleContext.ModuleId,
                        TabId: @Dnn.ModuleContext.TabId,
                        RequestVerificationToken: document.querySelector("input[name='__RequestVerificationToken']")?.value,
                    }

                }
            },
            created() {
               this.getData();
                // this.getCategories();
                //this.getUnits();
            },
            methods: {
                getData() {
                    axios.get(this.baseUrl + '/GetJsonResult', { headers: { ...this.headers } }).then(res => {
                        console.log(res)
                    })
                },
                addQuestion() {
                    axios.post(this.baseUrl + '/AddQuestion', this.model)
                        .then(res => {
                            debugger
                            let r = res.data;
                            alert(r.msg);
                            if (r.success) {
                                this.resetForm();
                            }
                        })
                },
                saveData() {
                    axios.post(this.baseUrl + '/GetTransactionInformation', this.model)
                        .then(res => {
                            let r = res.data;
                            alert(r.msg);
                            if (r.success) {
                                this.resetForm();
                            }
                        })
                },
                editData(mod) {
                    this.Id = mod.Id,
                        this.QuestionTitle = mod.QuestionTitle,
                        this.QuestionType = mod.QuestionType
                },
                deleteData(id) {
                    let url = '/DesktopModules/MVC/QuestionModule/Question/GetTransactionInformation';
                    axios.post(url, { 'id': id })
                        .then(res => {
                            let r = res.data;
                            alert(r.msg);
                            if (r.success) {
                              //  this.getData();
                            }
                        })
                },
                resetForm() {
                    this.model = {
                        Id: 0,
                        QuestionTitle: '',
                        QuestionType: '',
                    }
                }
            }
        })*@
    </script>

}